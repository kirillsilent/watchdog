#!/usr/bin/env python3
import os
import subprocess
import time
from datetime import datetime

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
WG_IF = "wg0"
WG_PING_IP = "8.8.8.8"

SOWA_SERVICE = "sowa.service"
SOWA_SIP_SERVICE = "sowa_sip.service"
SOWA_SIP_PING_IP = "172.16.105.2"   # <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π IP

LOGFILE = "/var/log/watchdog.log"
STATE_DIR = "/run/watchdog"

MAX_RESTARTS = 3
RESET_INTERVAL = 30   # —Å–µ–∫ (5 –º–∏–Ω—É—Ç)

DISK_WARN = 90
DISK_CRIT = 95
MAX_SYSLOAD = 10


def log(msg):
    with open(LOGFILE, "a") as f:
        f.write(f"{datetime.now():%Y-%m-%d %H:%M:%S} | {msg}\n")


def run(cmd):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å True/False –ø–æ exit code"""
    return subprocess.call(cmd, shell=True,
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL) == 0


def get_disk_usage():
    out = subprocess.check_output("df -h / | awk 'NR==2 {print $5}'", shell=True)
    return int(out.decode().strip().replace("%", ""))


def get_sysload():
    with open("/proc/loadavg") as f:
        return float(f.read().split()[0])
def check_sowa_sip_journal():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∂—É—Ä–Ω–∞–ª–∞ sowa_sip.service.
    –ï—Å–ª–∏ –ø–æ–¥—Ä—è–¥ N —Å—Ç—Ä–æ–∫ = 'Registration successful', –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
    """
    N = 5
    try:
        out = subprocess.check_output(
            ["sudo", "journalctl", "-u", SOWA_SIP_SERVICE, "-n", str(N), "--no-pager"],
            stderr=subprocess.DEVNULL
        ).decode("utf-8", errors="ignore").strip().splitlines()

        if len(out) < N:
            return False

        # –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        logs = [line for line in out if "Registration successful" in line]

        return len(logs) == N  # –≤—Å–µ N —Å—Ç—Ä–æ–∫ —Å–æ–≤–ø–∞–ª–∏
    except Exception as e:
        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∂—É—Ä–Ω–∞–ª–∞ {SOWA_SIP_SERVICE}: {e}")
        return False

def should_restart(name):
    """–ê–Ω—Ç–∏—Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤"""
    os.makedirs(STATE_DIR, exist_ok=True)
    state_file = os.path.join(STATE_DIR, f"{name}.count")

    now = int(time.time())
    count, lasttime = 0, 0

    if os.path.exists(state_file):
        with open(state_file) as f:
            parts = f.read().strip().split()
            if len(parts) == 2:
                count, lasttime = int(parts[0]), int(parts[1])

    # —Å–±—Ä–æ—Å –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ RESET_INTERVAL
    if now - lasttime > RESET_INTERVAL:
        count = 0

    count += 1
    with open(state_file, "w") as f:
        f.write(f"{count} {now}")

    if count > MAX_RESTARTS:
        log(f"‚ùå –õ–∏–º–∏—Ç —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –¥–ª—è {name} –ø—Ä–µ–≤—ã—à–µ–Ω ({count}). –ü—Ä–æ–ø—É—Å–∫–∞—é.")
        return False
    return True


def restart(service):
    log(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é {service}")
    run(f"sudo systemctl restart {service}")


def main():
    healthy = True  # —Ñ–ª–∞–≥, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞ ===
    disk_used = get_disk_usage()
    if disk_used > DISK_CRIT:
        log(f"‚ùå –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {disk_used}% ‚Äî —Ä–µ—Å—Ç–∞—Ä—Ç—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    elif disk_used > DISK_WARN:
        log(f"‚ö†Ô∏è –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {disk_used}% ‚Äî —á–∏—â—É –ª–æ–≥–∏.")
        run("sudo journalctl --vacuum-time=7d")
        run("sudo find /var/log -type f -size +100M -delete")
        healthy = False

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ ===
    sysload = get_sysload()
    if sysload > MAX_SYSLOAD:
        log(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (load={sysload}) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –∏—Ç–µ—Ä–∞—Ü–∏—é.")
        run("reboot")
        return

    # === WireGuard ===
    if run(f"ip link show {WG_IF}"):
        # –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏–Ω–≥
        if not run(f"ping -I {WG_IF} -c2 -W5 {WG_PING_IP}"):
            if should_restart("wg"):
                log(f"‚ö†Ô∏è –ù–µ—Ç –ø–∏–Ω–≥–∞ {WG_PING_IP} —á–µ—Ä–µ–∑ {WG_IF} ‚Äî —Ä–µ—Å—Ç–∞—Ä—Ç wg-quick@{WG_IF}")
                restart(f"wg-quick@{WG_IF}")
            else:
                log(f"üö® {WG_IF} –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ {MAX_RESTARTS} —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é RPi")
                run("sudo /sbin/reboot")
            healthy = False
    else:
        # –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ–æ–±—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if should_restart("wg"):
            log(f"‚ö†Ô∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å {WG_IF} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Ä–µ—Å—Ç–∞—Ä—Ç wg-quick@{WG_IF}")
            restart(f"wg-quick@{WG_IF}")
        else:
            log(f"üö® {WG_IF} —Ç–∞–∫ –∏ –Ω–µ –ø–æ–¥–Ω—è–ª—Å—è –ø–æ—Å–ª–µ {MAX_RESTARTS} –ø–æ–ø—ã—Ç–æ–∫ ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é RPi")
            run("sudo /sbin/reboot")
        healthy = False
    # === Sowa_SIP ===
    if not run(f"ping -c2 -W2 {SOWA_SIP_PING_IP}"):
        if should_restart(SOWA_SIP_SERVICE):
            log(f"‚ö†Ô∏è –ù–µ—Ç –ø–∏–Ω–≥–∞ –¥–æ {SOWA_SIP_PING_IP} ‚Äî —Ä–µ—Å—Ç–∞—Ä—Ç {SOWA_SIP_SERVICE}.")
            restart(SOWA_SIP_SERVICE)
        healthy = False
    
    elif check_sowa_sip_journal():
        if should_restart(SOWA_SIP_SERVICE):
            log(f"‚ö†Ô∏è {SOWA_SIP_SERVICE} –∑–∞—Ü–∏–∫–ª–∏–ª—Å—è –Ω–∞ 'Registration successful' ‚Äî —Ä–µ—Å—Ç–∞—Ä—Ç.")
            restart(SOWA_SIP_SERVICE)
        healthy = False
    
    elif not run(f"systemctl is-active --quiet {SOWA_SIP_SERVICE}"):
        if should_restart(SOWA_SIP_SERVICE):
            log(f"‚ö†Ô∏è {SOWA_SIP_SERVICE} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî —Ä–µ—Å—Ç–∞—Ä—Ç.")
            restart(SOWA_SIP_SERVICE)
        healthy = False

    # === –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ===
    if healthy:
        log("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")


if __name__ == "__main__":
    main()
